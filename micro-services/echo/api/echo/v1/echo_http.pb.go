// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.9
// source: echo/v1/echo.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEchoSayHello = "/echo.v1.Echo/SayHello"

type EchoHTTPServer interface {
	SayHello(context.Context, *EchoRequest) (*EchoReply, error)
}

func RegisterEchoHTTPServer(s *http.Server, srv EchoHTTPServer) {
	r := s.Route("/")
	r.GET("/echo/{name}", _Echo_SayHello0_HTTP_Handler(srv))
}

func _Echo_SayHello0_HTTP_Handler(srv EchoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EchoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEchoSayHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*EchoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EchoReply)
		return ctx.Result(200, reply)
	}
}

type EchoHTTPClient interface {
	SayHello(ctx context.Context, req *EchoRequest, opts ...http.CallOption) (rsp *EchoReply, err error)
}

type EchoHTTPClientImpl struct {
	cc *http.Client
}

func NewEchoHTTPClient(client *http.Client) EchoHTTPClient {
	return &EchoHTTPClientImpl{client}
}

func (c *EchoHTTPClientImpl) SayHello(ctx context.Context, in *EchoRequest, opts ...http.CallOption) (*EchoReply, error) {
	var out EchoReply
	pattern := "/echo/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEchoSayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
